// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/gin-gonic/gin"
	"github.com/tscolari/thruster"
)

type FakeController struct {
	IndexStub        func(context *gin.Context)
	indexMutex       sync.RWMutex
	indexArgsForCall []struct {
		context *gin.Context
	}
	ShowStub        func(context *gin.Context)
	showMutex       sync.RWMutex
	showArgsForCall []struct {
		context *gin.Context
	}
	CreateStub        func(context *gin.Context)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		context *gin.Context
	}
	UpdateStub        func(context *gin.Context)
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		context *gin.Context
	}
	DestroyStub        func(context *gin.Context)
	destroyMutex       sync.RWMutex
	destroyArgsForCall []struct {
		context *gin.Context
	}
}

func (fake *FakeController) Index(context *gin.Context) {
	fake.indexMutex.Lock()
	fake.indexArgsForCall = append(fake.indexArgsForCall, struct {
		context *gin.Context
	}{context})
	fake.indexMutex.Unlock()
	if fake.IndexStub != nil {
		fake.IndexStub(context)
	}
}

func (fake *FakeController) IndexCallCount() int {
	fake.indexMutex.RLock()
	defer fake.indexMutex.RUnlock()
	return len(fake.indexArgsForCall)
}

func (fake *FakeController) IndexArgsForCall(i int) *gin.Context {
	fake.indexMutex.RLock()
	defer fake.indexMutex.RUnlock()
	return fake.indexArgsForCall[i].context
}

func (fake *FakeController) Show(context *gin.Context) {
	fake.showMutex.Lock()
	fake.showArgsForCall = append(fake.showArgsForCall, struct {
		context *gin.Context
	}{context})
	fake.showMutex.Unlock()
	if fake.ShowStub != nil {
		fake.ShowStub(context)
	}
}

func (fake *FakeController) ShowCallCount() int {
	fake.showMutex.RLock()
	defer fake.showMutex.RUnlock()
	return len(fake.showArgsForCall)
}

func (fake *FakeController) ShowArgsForCall(i int) *gin.Context {
	fake.showMutex.RLock()
	defer fake.showMutex.RUnlock()
	return fake.showArgsForCall[i].context
}

func (fake *FakeController) Create(context *gin.Context) {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		context *gin.Context
	}{context})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		fake.CreateStub(context)
	}
}

func (fake *FakeController) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeController) CreateArgsForCall(i int) *gin.Context {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].context
}

func (fake *FakeController) Update(context *gin.Context) {
	fake.updateMutex.Lock()
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		context *gin.Context
	}{context})
	fake.updateMutex.Unlock()
	if fake.UpdateStub != nil {
		fake.UpdateStub(context)
	}
}

func (fake *FakeController) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeController) UpdateArgsForCall(i int) *gin.Context {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return fake.updateArgsForCall[i].context
}

func (fake *FakeController) Destroy(context *gin.Context) {
	fake.destroyMutex.Lock()
	fake.destroyArgsForCall = append(fake.destroyArgsForCall, struct {
		context *gin.Context
	}{context})
	fake.destroyMutex.Unlock()
	if fake.DestroyStub != nil {
		fake.DestroyStub(context)
	}
}

func (fake *FakeController) DestroyCallCount() int {
	fake.destroyMutex.RLock()
	defer fake.destroyMutex.RUnlock()
	return len(fake.destroyArgsForCall)
}

func (fake *FakeController) DestroyArgsForCall(i int) *gin.Context {
	fake.destroyMutex.RLock()
	defer fake.destroyMutex.RUnlock()
	return fake.destroyArgsForCall[i].context
}

var _ thruster.Controller = new(FakeController)
